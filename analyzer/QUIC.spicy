module QUIC;

import spicy;

##############
## Context - tracked in one connection
##############

type ConnectionIDInfo = unit {
  var client_cid_len: uint8;
  var server_cid_len: uint8;
  var initial_packets_exchanged: bool;

  on %init {
    self.client_cid_len = 0;
    self.server_cid_len = 0;
    self.initial_packets_exchanged = False;
  }
};

##############
# Definitions
##############

type LongPacketType = enum {
  INITIAL         = 0,
  ZERO_RTT        = 1,
  HANDSHAKE       = 2,
  RETRY           = 3,
};

type HeaderForm = enum {
  SHORT           = 0,
  LONG            = 1,
};

##############
# Helper units
##############

# Used to peek into the first byte and determine if it's a long or short packet
public type InitialByte = unit {
  initialbyte: bitfield(8) {
    header_form: 7 &convert=cast<HeaderForm>(cast<uint8>($$));
  };
  on %done{
    self.backtrack();
  }
};

# https://datatracker.ietf.org/doc/rfc9000/ 
# Section 16 and Appendix A
type VariableLengthIntegerLength = unit {
  var length: uint8;

  a: bitfield(8) {
    length: 6..7 &convert=cast<uint8>($$) &byte-order=spicy::ByteOrder::Big;
  };

  on %done {
    self.length = self.a.length;
    self.backtrack();
  }
};

type VariableLengthInteger = unit {
  var bytes_to_parse: uint8;
  var result: uint64;

  : VariableLengthIntegerLength &try {
    self.bytes_to_parse = $$.length + 1;
  }

  # Parse the required amount of bytes and apply a mask to clear the 
  # first two bits, leaving the actual length
  remainder: bytes &size=self.bytes_to_parse {
      switch ( self.bytes_to_parse ) {
        case 1:
          self.result = $$.to_uint(spicy::ByteOrder::Big) & 0x3f;
        case 2:
          self.result = $$.to_uint(spicy::ByteOrder::Big) & 0x3fff;
        case 3:
          self.result = $$.to_uint(spicy::ByteOrder::Big) & 0x3fffff;
        case 4:
          self.result = $$.to_uint(spicy::ByteOrder::Big) & 0x3fffffff;
     }
  }
} &convert=self.result;

##############
# Long packets
# Generic units
##############

public type LongHeader = unit {
  var client_conn_id_length: uint8;
  var server_conn_id_length: uint8;

  first_byte: bitfield(8) {
      header_form: 7 &convert=cast<HeaderForm>(cast<uint8>($$));
      fixed_bit: 6; 
      packet_type: 4..5 &convert=cast<LongPacketType>(cast<uint8>($$));
      type_specific_bits: 0..3 &convert=cast<uint8>($$);
  };

  version: uint32;
  dest_conn_id_len: uint8 { self.server_conn_id_length = $$; }
  dest_conn_id: bytes &size=self.server_conn_id_length;
  src_conn_id_len: uint8 { self.client_conn_id_length = $$; }
  src_conn_id: bytes &size=self.client_conn_id_length;

  # We pass the type specific 4 bits too and don't parse them again
  switch ( self.first_byte.packet_type ) {
    LongPacketType::INITIAL -> initial_hdr : InitialLongPacketHeader(self.first_byte.type_specific_bits);
    LongPacketType::ZERO_RTT -> zerortt_hdr : ZeroRTTLongPacketHeader(self.first_byte.type_specific_bits);
    LongPacketType::HANDSHAKE -> handshake_hdr : HandshakeLongPacketHeader(self.first_byte.type_specific_bits);
    LongPacketType::RETRY -> retry_hdr : RetryLongPacketHeader(self.first_byte.type_specific_bits);
  };

  on %error {
    print "Error parsing long header";
  }
};

# TODO: parse depending on LongPacketType
# E.g. the INITIAL packet payload is encrypted with well-known keys using a HKDF/AEAD combination.
# See https://www.rfc-editor.org/rfc/rfc9001.html#initial-secrets and https://datatracker.ietf.org/doc/html/rfc9001#appendix-A
public type LongPacketPayload = unit(packet_type: LongPacketType) {
  payload: bytes &eod;
};

##############
# Long packets
# Specific long packet type units
##############

type InitialLongPacketHeader = unit(type_specific_bits: uint8) {
  var packet_number_length_full: uint8;

  token_length: VariableLengthInteger;
  token: bytes &size=self.token_length;
  length: VariableLengthInteger;
  packet_number: bytes &size=self.packet_number_length_full &convert=$$.to_uint(spicy::ByteOrder::Big);

  on %init {
    # TODO: verify if this is correct, as the packet numbers can be encoded/decoded
    # in the header.

    # Will result in 0, 1, 2 or 3. So we need to read n+1 bytes
    self.packet_number_length_full = (type_specific_bits & 0x03) + 1;
  }
};

# TODO: implement
type ZeroRTTLongPacketHeader = unit(type_specific_bits: uint8) {};
type HandshakeLongPacketHeader = unit(type_specific_bits: uint8) {};
type RetryLongPacketHeader = unit(type_specific_bits: uint8) {};

##############
# Short packets
##############

# TODO: implement
public type ShortHeader = unit(dest_conn_id_length: uint8) {  
  first_byte:  bitfield(8) {
      header_form: 7 &convert=cast<HeaderForm>(cast<uint8>($$));
      fixed_bit: 6; 
      spin_bit: 5;
      todo: 0..4;
    };
    dest_conn_id: bytes &size=dest_conn_id_length;

  on %error {
    print "Error parsing short header";
  }
};

# TODO: investigate whether we can parse something useful out of this
public type ShortPacketPayload = unit {
  payload: bytes &eod;
};

##############
# QUIC frame parsing
##############
type Frame = unit(from_client: bool, context: ConnectionIDInfo&) {
  var hdr_form: HeaderForm;

  # Peek into the header to check if it's a SHORT or LONG header
  : InitialByte &try {
    self.hdr_form = $$.initialbyte.header_form;
  }

  # Depending on the header, parse it and update the src/dest ConnectionID's
  # https://datatracker.ietf.org/doc/html/rfc9000#section-7.2
  # " A client MUST change the Destination Connection ID it uses for
  # sending packets in response to only the first received Initial or
  # Retry packet. "
  switch ( self.hdr_form ) {
    HeaderForm::SHORT -> short_header: ShortHeader(context.client_cid_len);
    HeaderForm::LONG -> long_header: LongHeader {

        # For now, only allow a change of src/dest ConnectionID's for INITIAL packets.
        # TODO: allow this for Retry packets

        if ( self.long_header.first_byte.packet_type == LongPacketType::INITIAL && 
            ! context.initial_packets_exchanged ) {

          if ( from_client ) {
            context.server_cid_len = self.long_header.dest_conn_id_len;
            context.client_cid_len = self.long_header.src_conn_id_len;
          } else {
            context.server_cid_len = self.long_header.src_conn_id_len;
            context.client_cid_len = self.long_header.dest_conn_id_len;

            # Assuming that the client set up the connection, this can be considered the first
            # received Initial from the client. So disable change of ConnectionID's afterwards
            context.initial_packets_exchanged = True;
          }
        }
    }
  };

  # Depending on the type of header, we parse the remaining payload.
  switch ( self.hdr_form ) {
    HeaderForm::SHORT ->  remaining_short_payload: ShortPacketPayload {
      # TODO: remove, debug only
      print "%s with data length %d to %X \n" % (self.hdr_form,
                                                |$$.payload|, 
                                                self.short_header.dest_conn_id);
    }
    HeaderForm::LONG -> remaining_long_payload: LongPacketPayload(self.long_header.first_byte.packet_type) {
      # TODO: remove, debug only
      print "%s->%s with data length %d from '%X' to '%X' \n" % 
          (self.hdr_form, self.long_header.first_byte.packet_type,
          |$$.payload|,
          self.long_header.src_conn_id, 
          self.long_header.dest_conn_id);
    }
  };
};

##############
# Entrypoints
##############
public type RequestFrame = unit {
  %context = ConnectionIDInfo;
  : Frame(True, self.context());

  on %error {
    print "Error while parsing RequestFrame";
  }
};

public type ResponseFrame = unit {
  %context = ConnectionIDInfo;
  : Frame(False, self.context());

  on %error {
    print "Error while parsing ResponseFrame";
  }
};
